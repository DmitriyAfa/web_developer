export const commonQuestions = {
  title: "Общие вопросы",
  questions: [
    {
      question: "Что такое JavaScript",
      topics: [
        {
          topic: "Предназначение ? ",
          answer: [`Изначально Создан для "оживления" веб-страницы`],
          id: 0,
        },
        {
          topic: "Особенности JavaScript ?",
          answer: [
            `Программы на этом язывке называются скриптами. Они могут читаться и выполняться в браузерах без дополнительных усилий в виде дополнительной подготовки и компиляции`,
            `Могут манипулировать HTML-кодом, css-стилями, взаимодействовать с API , реагировать на действия мыши, взаимодействовать с удалёнными серверами`,
          ],
          id: 1,
        },
        {
          topic: "Возможности JavaScript ?",
          answer: [
            `Сейчас JavaScript используется для Frontend разработки, Backend разработки, а так же в мобильной разработке. Для чего имеет множество библиотек. `,
          ],
          id: 2,
        },
      ],
      id: 0,
    },
    {
      question: "Отличие способов объявляния переменных var, let и const",
      answers: [
        {
          topic: "var",
          answer: [
            `Область видимости вне функции глобальная, внутри функции локальная`,
            `Переменные могут быть объявлены повторно или быть обновлены`,
            `Подвержена hoisting. Если вызвать переменную до ее объявлления получим undefined`,
          ],
          id: 0,
        },
        {
          topic: "let",
          answer: [
            `Имеет блочную область видимости, т.е. область видимости ограничена фигурными скобками {область видимости let-переменной}`,
            `В случае повтороного объявления получим ошибку, может быть обновлена`,
            `Не подвержена hoisting. Если вызвать переменную до ее объявления получим ошибку.`,
          ],
          id: 1,
        },
        {
          topic: "const",
          answer: [
            `Имеет блочную область видимости, т.е. область видимости ограничена фигурными скобками {область видимости let-переменной}`,
            `В случае повтороного объявления получим ошибку, может быть обновлена`,
            `Не подвержена hoisting. Если вызвать переменную до ее объявления получим ошибку.`,
          ],
          id: 2,
        },
      ],
      id: 1,
    },
    {
      question: "Что такое scope (область видимости)",
      answers: [
        {
          /*
            topic: undefined
            */
          answer: [`Указывает на то, где переменная может быть доступна`],
          id: 0,
        },
      ],
      id: 2,
    },
    {
      question: "Что такое hoisting (поднятие)",
      answers: [
        {
          answer: [
            `Это механизм JavaScript-а, при котором переменные всплывают вверх своих оьластей видимости перед тем как код будет выполнен`,
            `Этот механизм позволяет разработчику обращаться к переменным и функциям которые подвержены hoisting до их объявления в коде`,
          ],
          id: 0,
        },
      ],
      id: 3,
    },
    {
      question: "Что такое замыкание",
      answers: [
        {
          answer: [
            `Это концепция при которой функция имеет доступ до переменных вышестоящего scope`,
            `Обычно замыкание объясняется на примере функции находящейся в другой функции. Тут это момент когда внутренняя функция получает доступ к переменным из "родительской" функции`,
            `Хочу отметить что когда функция получает доступ к перемнной из глобальной области видимости - это тоже замыкание`,
          ],
          id: 0,
        },
      ],
      id: 4,
    },
    {
      question: "IIFE ?",
      answers: [
        {
          topic: "Imediate invoked function expression",
          answer: [`Самовызывающаяся функция`, `Изолирует свои переменные`],
          id: 0,
        },
      ],
      id: 5,
    },
    {
      question: "Какая разница между областью видимости и контекстом ?",
      answers: [
        {
          answer: [
            `Не совсем корректно сравнивать эти понятия. Область видимости относится к переменным, а контекст к функции.`,
          ],
          id: 0,
        },
      ],
      id: 6,
    },
    {
      question:
        "Способы создания функций. Function declaration и function expression ?",
      answers: [
        {
          topic: "Function declaration",
          answer: [
            `Функция созданная с помощью ключевого слова function`,
            `Подвержена hoisting`,
          ],
          id: 0,
        },
        {
          topic: "Function expression",
          answer: [
            `Функция присвоенная как значение переменной`,
            `Не подвержена hoisting. Не важно с помощью какого ключевого слова была создана функция`,
          ],
          id: 1,
        },
      ],
      id: 7,
    },
    {
      question: "Сколько примитивов в JavaScript ? Что это за примитивы",
      answers: [
        {
          topic: "7 примитивов",
          answer: [`string, number, boolean, bigInt, symbol, undefined, null`],
          id: 0,
        },
        {
          topic: "Какие примитивы не имеют методов ?",
          answer: [`undefined и null`],
          id: 1,
        },
      ],
      id: 8,
    },
    {
      question: "В чем разница между undefined и null",
      answers: [
        {
          topic: "Поговорим о сходствах",
          answer: [
            `Оба типа примитива, при приведении к boolean-значению вернут false, нет методов`,
          ],
          id: 0,
        },
        {
          topic: "Null",
          answer: [
            `Присваивается явно. Используется когда нужно обозначить что переменная или значение по ключу объекта отсутствует и ожидается в будущем`,
            ``,
          ],
          id: 1,
        },
        {
          topic: "Undefined",
          answer: [
            `Присваивается по-умолчанию когда переменная к которой обратились была объявлена без присваивания значения. Или когда обращаемся к несуществующему ключу объекта`,
          ],
          id: 2,
        },
      ],
      id: 9,
    },
  ],
  id: 0,
};
