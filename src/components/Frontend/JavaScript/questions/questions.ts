import { TSubjectOfQuestions } from "../../../../types/Frontend/questions";

const commonQestions10 = [
  {
    question: "Что такое JavaScript",
    answers: [
      {
        topic: "Предназначение ? ",
        answer: [`Изначально Создан для "оживления" веб-страницы`],
        id: 0,
      },
      {
        topic: "Особенности JavaScript ?",
        answer: [
          `Программы на этом язывке называются скриптами. Они могут читаться и выполняться в браузерах без дополнительных усилий в виде дополнительной подготовки и компиляции`,
          `Могут манипулировать HTML-кодом, css-стилями, взаимодействовать с API , реагировать на действия мыши, взаимодействовать с удалёнными серверами`,
        ],
        id: 1,
      },
      {
        topic: "Возможности JavaScript ?",
        answer: [
          `Сейчас JavaScript используется для Frontend разработки, Backend разработки, а так же в мобильной разработке. Для чего имеет множество библиотек. `,
        ],
        id: 2,
      },
    ],
    id: 0,
  },
  {
    question: "Отличие способов объявляния переменных var, let и const",
    answers: [
      {
        topic: "var",
        answer: [
          `Область видимости вне функции глобальная, внутри функции локальная`,
          `Переменные могут быть объявлены повторно или быть обновлены`,
          `Подвержена hoisting. Если вызвать переменную до ее объявлления получим undefined`,
        ],
        id: 0,
      },
      {
        topic: "let",
        answer: [
          `Имеет блочную область видимости, т.е. область видимости ограничена фигурными скобками {область видимости let-переменной}`,
          `В случае повтороного объявления получим ошибку, может быть обновлена`,
          `Не подвержена hoisting. Если вызвать переменную до ее объявления получим ошибку.`,
        ],
        id: 1,
      },
      {
        topic: "const",
        answer: [
          `Имеет блочную область видимости, т.е. область видимости ограничена фигурными скобками {область видимости let-переменной}`,
          `В случае повтороного объявления получим ошибку, может быть обновлена`,
          `Не подвержена hoisting. Если вызвать переменную до ее объявления получим ошибку.`,
        ],
        id: 2,
      },
    ],
    id: 1,
  },
  {
    question: "Что такое scope (область видимости)",
    answers: [
      {
        /*
          topic: undefined
          */
        answer: [`Указывает на то, где переменная может быть доступна`],
        id: 0,
      },
    ],
    id: 2,
  },
  {
    question: "Что такое hoisting (поднятие)",
    answers: [
      {
        answer: [
          `Это механизм JavaScript-а, при котором переменные всплывают вверх своих оьластей видимости перед тем как код будет выполнен`,
          `Этот механизм позволяет разработчику обращаться к переменным и функциям которые подвержены hoisting до их объявления в коде`,
        ],
        id: 0,
      },
    ],
    id: 3,
  },
  {
    question: "Что такое замыкание",
    answers: [
      {
        answer: [
          `Это концепция при которой функция имеет доступ до переменных вышестоящего scope`,
          `Обычно замыкание объясняется на примере функции находящейся в другой функции. Тут это момент когда внутренняя функция получает доступ к переменным из "родительской" функции`,
          `Хочу отметить что когда функция получает доступ к перемнной из глобальной области видимости - это тоже замыкание`,
        ],
        id: 0,
      },
    ],
    id: 4,
  },
  {
    question: "IIFE ?",
    answers: [
      {
        topic: "Imediate invoked function expression",
        answer: [`Самовызывающаяся функция`, `Изолирует свои переменные`],
        id: 0,
      },
    ],
    id: 5,
  },
  {
    question: "Какая разница между областью видимости и контекстом ?",
    answers: [
      {
        answer: [
          `Не совсем корректно сравнивать эти понятия. Область видимости относится к переменным, а контекст к функции.`,
        ],
        id: 0,
      },
    ],
    id: 6,
  },
  {
    question:
      "Способы создания функций. Function declaration и function expression ?",
    answers: [
      {
        topic: "Function declaration",
        answer: [
          `Функция созданная с помощью ключевого слова function`,
          `Подвержена hoisting`,
        ],
        id: 0,
      },
      {
        topic: "Function expression",
        answer: [
          `Функция присвоенная как значение переменной`,
          `Не подвержена hoisting. Не важно с помощью какого ключевого слова была создана функция`,
        ],
        id: 1,
      },
    ],
    id: 7,
  },
  {
    question: "Сколько примитивов в JavaScript ? Что это за примитивы",
    answers: [
      {
        topic: "7 примитивов",
        answer: [`string, number, boolean, bigInt, symbol, undefined, null`],
        id: 0,
      },
      {
        topic: "Какие примитивы не имеют методов ?",
        answer: [`undefined и null`],
        id: 1,
      },
    ],
    id: 8,
  },
  {
    question: "В чем разница между undefined и null",
    answers: [
      {
        topic: "Поговорим о сходствах",
        answer: [
          `Оба типа примитива, при приведении к boolean-значению вернут false, нет методов`,
        ],
        id: 0,
      },
      {
        topic: "Null",
        answer: [
          `Присваивается явно. Используется когда нужно обозначить что переменная или значение по ключу объекта отсутствует и ожидается в будущем`,
          ``,
        ],
        id: 1,
      },
      {
        topic: "Undefined",
        answer: [
          `Присваивается по-умолчанию когда переменная к которой обратились была объявлена без присваивания значения. Или когда обращаемся к несуществующему ключу объекта`,
        ],
        id: 2,
      },
    ],
    id: 9,
  },
];

const commonQuestions20 = [
  {
    question: "Почему у примитивов есть методы",
    answers: [
      {
        topic: "Поговорим о сходствах",
        answer: [
          `При вызове методов у примитива появляется объект-обёртка. После отработки метода обёртка уничтожается`,
        ],
        id: 0,
      },
    ],
    id: 10,
  },
  {
    question: "Что такое API",
    answers: [
      {
        topic: "Аpplication Programming Interface",
        answer: [
          `Программный интерфейс приложения`,
          `API предоставляется сторонней программой (Browser или любой другой программой) и представляет из себя методы и способы взаимодействия с данной программой`,
          `Иными словами это некий контракт который предоставляет приложение. Он говорит что на определённые действия программа обязуется ответить определённыи образом`,
        ],
        id: 0,
      },
    ],
    id: 11,
  },
  {
    question: "Что такое DOM",
    answers: [
      {
        topic: "Document Object Model",
        answer: [
          `Объективная модель документа`,
          `DOM - это API который имеет методы и способы для работы с HTML-документом. DOM представляет из себя древовидную структуру`,
          `В JavaScript DOM является специальным объектом Document который так-же имеет множество методов для манипуляции DOM`,
        ],
        id: 0,
      },
    ],
    id: 12,
  },
  {
    question: "В чём разница между сравнением == и ===",
    answers: [
      {
        topic: "==",
        answer: [
          `Это сравнение с приведением типов. Если сравним 1 и "1", тогда 1 приведётся к логическому значению true. "1" сначала приведётся к 1, а затем так же к true. И в конечном счёте сравним true с true и получим true`,
        ],
        id: 0,
      },
      {
        topic: "===",
        answer: [
          `Сравнение без приведения типов. Если сравним 1 и "1", то сравнится 1 (number) с "1" (string) и получим false`,
        ],
        id: 1,
      },
    ],
    id: 13,
  },
  {
    question: "Как сравнить на равенство две сущности",
    answers: [
      {
        answer: [
          `Если речь идёт о строках и/ или number, в общем если речь о примитивах, тогда можем сравнить с помощью == или ===`,
          `Если речь идёт об объектах, тогда нужно пройтись в цикле по каждому ключу/индексу объекта и сравнить их попарно. Потому что объект - это ссылочная модель и в таком случае даже два пустых {} и {} не равны друг другу. Они ссылаются на разные объекты (области памяти)`,
        ],
        id: 0,
      },
    ],
    id: 14,
  },
  {
    question: "Что вернёт typeof null ? Почему",
    answers: [
      {
        answer: [
          `Вернёт "object". В первых версиях JavaScript null был объектом, а в последующем множество проектов было основано на этой ошибке. Поэтому менять не стали`,
        ],
        id: 0,
      },
    ],
    id: 15,
  },
  {
    question: "Области видимости в JavaScript",
    answers: [
      {
        answer: [
          `Глобальная область видимости (глобальный объект window) самая внешняя область`,
          `Блочная все что внутри {}`,
          `Функциональная область видимости`,
        ],
        id: 0,
      },
    ],
    id: 16,
  },
  {
    question: "Как можно хранить данные в браузере",
    answers: [
      {
        topic: "cookie",
        answer: [
          "Это небольшие строки данных до 4kb",
          `Можно устрановить срок жизни куки при создании куки, без этого куки умрёт при закрытии браузера`,
        ],
        id: 0,
      },
      {
        topic: "sessionStorage",
        answer: [
          `Позволяет хранить пары ключ-значение в браузере с лимитом до +5Mb, не имеют времени истечения. Разделяются в рамках вкладки браузера, умирают после закрытия вкладки`,
        ],
        id: 1,
      },
      {
        topic: "localStorage",
        answer: [
          `Похож на sessionStorage, но сохраняется после закрытия браузера. Значит удалить можно только намеренно`,
        ],
        id: 2,
      },
    ],
    id: 17,
  },
  {
    question: "Как понимать ссылка на переменную",
    answers: [
      {
        answer: [
          `Это способ присвоения значения переменной который зависит от типа присваемого значения. Если это примитив, тогда перменной присваевается значение примитива (сам примитив). А если это объект, то в переменную записывается ссылка на объект (ссылка на его место в памяти)`,
        ],
        id: 0,
      },
    ],
    id: 18,
  },
  {
    question: "Что такое выражение",
    answers: [
      {
        answer: [
          `Это результат который возвращает код после завершения своей работы`,
        ],
        id: 0,
      },
    ],
    id: 19,
  },
];

export const commonQuestions = {
  title: "Общие вопросы",
  questions: [...commonQestions10, ...commonQuestions20],
  id: 0,
};

export const questions: TSubjectOfQuestions = [commonQuestions];
